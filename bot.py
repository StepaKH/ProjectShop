import getInfAboutProduct
import telebot
import config
import takeToken
import sqlite3
import checkUser
import editUser

from telebot import types

import re
from io import BytesIO
import os

user_states = {}

bot = telebot.TeleBot(config.TOKEN)
bot.set_webhook()

def mainKeyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bottom1 = types.KeyboardButton("–ì–ª–∞–≤–Ω–∞—è")
    bottom2 = types.KeyboardButton("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
    bottom3 = types.KeyboardButton("–ó–∞–∫–∞–∑")
    markup.row(bottom1, bottom2)
    markup.add(bottom3)
    return markup

@bot.message_handler(commands = ['start', 'main', 'hello'])
@bot.message_handler(func=lambda message: message.text.lower() == '–≥–ª–∞–≤–Ω–∞—è')
def welcome(message):
    #DB
    conn = sqlite3.connect('shop.sql')
    cur = conn.cursor()

    cur.execute('CREATE TABLE IF NOT EXISTS users (id int auto_increment primary key, name varchar(255), tgId varchar(20) unique not null, phone varchar(20))')

    conn.commit()
    cur.close()
    conn.close()
    ###

    user_states[message.chat.id] = {'name':None, 'phone':None, 'tgId':None}
    sti = open('static/welcome.webp', 'rb')

    bot.send_sticker(message.chat.id, sti)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n "
                                      "–Ø - <b>—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–µ —Ç–∫–∞–Ω–µ–π</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑.".format(message.from_user, bot.get_me()),
                     parse_mode='html')

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–°—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–∫–∏", callback_data='status')
    btn2 = types.InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='order')
    markup.row(btn1, btn2)
    bot.send_message(message.chat.id, "{0.first_name}, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>–°—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–∫–∏</b>\n"
                                      "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑</b>".format(message.from_user, bot.get_me()), parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['order'])
@bot.message_handler(func=lambda message: message.text.lower() == '–∑–∞–∫–∞–∑')
def order(message):
    user_states[message.chat.id] = {'token' : None}
    #bot.delete_message(message.chat.id, message.message_id - 2)
    bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞—á–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.", reply_markup=types.ReplyKeyboardRemove())
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–∞—Ä—Ç–∏–∫—É–ª</b> —Ç–æ–≤–∞—Ä–∞\n"
                                      "<b>–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 875234</b>\n\n"
                                      "–ï—Å–ª–∏ –≤—ã –∑–∞–±—ã–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, —Ç–æ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ\n"
                                      "<b>–í–æ—Ç —Å—Å—ã–ª–∫–∞ -> https://t.me/bravissimo_nn</b>", parse_mode='html')
    bot.register_next_step_handler(message, get_token)
    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–µ—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
def get_token(message):
    #config.token = message.text.strip()
    #user_states[message.chat.id]['token':None]
    user_states[message.chat.id]['token'] = message.text.strip()
    #config.product_data = getInfAboutProduct.get_product_data(config.token)
    #user_states[message.chat.id]['product_data':None]
    user_states[message.chat.id]['product_data'] = getInfAboutProduct.get_product_data(user_states[message.chat.id]['token'])
    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    if (not user_states[message.chat.id]['product_data']):
        bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Çüò¢\n'
                         f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')
        order(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        bottom1 = types.KeyboardButton("–í–µ—Ä–Ω–æ")
        bottom2 = types.KeyboardButton("–ù–µ–≤–µ—Ä–Ω–æ")
        markup.row(bottom1, bottom2)

        bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∞—Ä—Ç–∏–∫—É–ª\n"
                                          "–î–∞–Ω–Ω—ã–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É:")

        #name = config.product_data[1]
        #price = config.product_data[3]
        #width = config.product_data[4]
        #token = config.product_data[5]
        #photo = config.product_data[2]  # –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ñ–∞–π–ª
        with open(f'{user_states[message.chat.id]['product_data'][1]}.jpg', 'wb') as file:
            file.write(user_states[message.chat.id]['product_data'][2])
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–µ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        bot.send_photo(message.chat.id, open(f'{user_states[message.chat.id]['product_data'][1]}.jpg', 'rb'), caption = f'Name: {user_states[message.chat.id]['product_data'][1]}\n Price: {user_states[message.chat.id]['product_data'][3]}\n Width: {user_states[message.chat.id]['product_data'][4]}\n Token: {user_states[message.chat.id]['product_data'][5]}', reply_markup=markup)
        os.remove(f'{user_states[message.chat.id]['product_data'][1]}.jpg')
        #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
        bot.register_next_step_handler(message, check_product)
def check_product(message):
    if (message.text.strip() == '–ù–µ–≤–µ—Ä–Ω–æ'):
        order(message)
    elif (message.text.strip() == '–í–µ—Ä–Ω–æ'):
        get_info_user(message)
    else:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫: –í–µ—Ä–Ω–æ –∏–ª–∏ –ù–µ–≤–µ—Ä–Ω–Ω–æ")
        bot.register_next_step_handler(message, check_product)
def get_info_user(message):
    #Register users
    #user_states[message.chat.id]['user_data':None]
    user_states[message.chat.id]['user_data'] = checkUser.get_user_data(message.from_user.id)
    #config.user_data = checkUser.get_user_data(message.from_user.id)
    if (user_states[message.chat.id]['user_data']):
        markup = types.InlineKeyboardMarkup()
        bottom1 = types.InlineKeyboardButton('–í–µ—Ä–Ω–æ', callback_data='true_enter')
        bottom2 = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏–ª–∏—Å—å', callback_data='edit_data')
        markup.row(bottom1, bottom2)

        user_states[message.chat.id]['name'] = user_states[message.chat.id]['user_data'][1]
        user_states[message.chat.id]['phone'] = user_states[message.chat.id]['user_data'][3]
        user_states[message.chat.id]['tgId'] = message.from_user.id
        #config.name = config.user_data[1]
        #config.phone = config.user_data[3]
        #config.tg_id = config.user_data[2]

        bot.send_message(message.chat.id,f'–í—ã —É–∂–µ –±—ã–ª–∏ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ, –∏ —É –Ω–∞—Å –µ—Å—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µüòÅ', reply_markup=types.ReplyKeyboardRemove())
        bot.send_message(message.chat.id, f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:\n\n'
                                          f'–§–ò–û: {user_states[message.chat.id]['user_data'][1]}\n'
                                          f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_states[message.chat.id]['user_data'][3]}', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –≤–∞—Å –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–≤–æ–∞—Ç—å!\n"
                                          "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏: –§–∞–º–∏–ª–∏—è, –ò–º—è, –û—Ç—á–µ—Å—Ç–≤–æ", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, user_name)
def user_name(message):
    user_states[message.chat.id]['name'] = message.text.strip()
    if re.match(r'^[–ê-–Ø–Å–∞-—è—ë]+\s+[–ê-–Ø–Å–∞-—è—ë]+\s+[–ê-–Ø–Å–∞-—è—ë]+$', user_states[message.chat.id]['name']):
        # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ
        #config.name = full_name
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö:\n"
                                          "89*********\n"
                                          "+79*********")
        bot.register_next_step_handler(message, user_phone)
    else:
        # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –§–ò–û
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        bot.register_next_step_handler(message, user_name)
def user_phone(message):
    user_states[message.chat.id]['phone'] = message.text.strip()
    if re.match(r'^(\+7|8)9\d{9}$', user_states[message.chat.id]['phone']):
        # –í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É
        #config.phone = message.text.strip()
        #config.tg_id = message.from_user.id

        user_states[message.chat.id]['tgId'] = message.from_user.id
        markup = types.InlineKeyboardMarkup()
        bottom1 = types.InlineKeyboardButton('–í–µ—Ä–Ω–æ', callback_data='true_enter')
        bottom2 = types.InlineKeyboardButton('–ù–µ–≤–µ—Ä–Ω–æ', callback_data='false_enter')
        markup.row(bottom1,bottom2)

        bot.send_message(message.chat.id, f'–ú—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüî•')
        bot.send_message(message.chat.id,f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:\n –§–ò–û: {user_states[message.chat.id]['name']}\n –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_states[message.chat.id]['phone']}', reply_markup=markup)
    else:
        # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        bot.register_next_step_handler(message, user_phone)

@bot.message_handler(commands=['advice'])
@bot.message_handler(func=lambda message: message.text.lower() == '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è')
def consult(message):
    #name = config.product_data[1]
    #price = config.product_data[3]
    #width = config.product_data[4]
    #token = config.product_data[5]
    #photo = config.product_data[2]  # –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ñ–∞–π–ª
    with open(f'{user_states[message.chat.id]['product_data'][1]}.jpg', 'wb') as file:
        file.write(user_states[message.chat.id]['product_data'][2])
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–µ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    bot.send_photo(config.manager_id, open(f'{user_states[message.chat.id]['product_data'][1]}.jpg', 'rb'), caption= f'–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è!\n'
                                        f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º - {user_states[message.chat.id]['product_data'][5]}:\n'
                                        f'–ù–∞–∑–≤–∞–Ω–∏–µ: {user_states[message.chat.id]['product_data'][1]}\n'
                                        f'–¶–µ–Ω–∞: {user_states[message.chat.id]['product_data'][3]}\n'
                                        f'–®–∏—Ä–∏–Ω–∞: {user_states[message.chat.id]['product_data'][4]}\n\n'
                                                                          
                                        f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n'
                                        f'–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {message.from_user.username}\n'
                                        f'–§–ò–û - {user_states[message.chat.id]['name']}\n'
                                        f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {user_states[message.chat.id]['phone']}')
    os.remove(f'{user_states[message.chat.id]['product_data'][1]}.jpg')

    bot.send_message(message.chat.id,f'–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Å–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä —Å–º–æ–≥ –≤–∞—Å –ø–æ–Ω—è—Ç—å)\n\n'
                                     f'<b>–ü–µ—Ä–µ—Ö–æ–¥–∏ —Å—é–¥–∞</b> -> https://t.me/res12245', parse_mode='html', reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(commands=['edit_name'])
@bot.message_handler(func=lambda message: message.text.lower() == '—Ñ–∏–æ')
def name(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏: –§–∞–º–∏–ª–∏—è, –ò–º—è, –û—Ç—á–µ—Å—Ç–≤–æ", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, get_name)
def get_name(message):
    #full_name = message.text.strip()
    user_states[message.chat.id]['name'] = message.text.strip()
    if re.match(r'^[–ê-–Ø–Å–∞-—è—ë]+\s+[–ê-–Ø–Å–∞-—è—ë]+\s+[–ê-–Ø–Å–∞-—è—ë]+$', user_states[message.chat.id]['name']):
        #config.name = full_name
        editUser.update_user_name(user_states[message.chat.id]['name'], message.from_user.id)
        markup = types.InlineKeyboardMarkup()
        bottom1 = types.InlineKeyboardButton('–í–µ—Ä–Ω–æ', callback_data='true_enter')
        bottom2 = types.InlineKeyboardButton('–ù–µ–≤–µ—Ä–Ω–æ', callback_data='edit_data')
        markup.row(bottom1, bottom2)
        bot.send_message(message.chat.id,f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:\n –§–ò–û: {user_states[message.chat.id]['name']}\n –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_states[message.chat.id]['phone']}',reply_markup=markup)
    else:
        # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –§–ò–û
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        bot.register_next_step_handler(message, get_name)


@bot.message_handler(commands=['edit_phone'])
@bot.message_handler(func=lambda message: message.text.lower() == '–Ω–æ–º–µ—Ä')
def phone(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, get_phone)
def get_phone(message):
    # phone_nember = message.text.strip()
    user_states[message.chat.id]['phone'] = message.text.strip()
    if re.match(r'^79\d{9}$', user_states[message.chat.id]['phone']):
        #config.phone = phone_number
        editUser.update_user_phone(user_states[message.chat.id]['phone'], message.from_user.id)
        markup = types.InlineKeyboardMarkup()
        bottom1 = types.InlineKeyboardButton('–í–µ—Ä–Ω–æ', callback_data='true_enter')
        bottom2 = types.InlineKeyboardButton('–ù–µ–≤–µ—Ä–Ω–æ', callback_data='edit_data')
        markup.row(bottom1, bottom2)
        bot.send_message(message.chat.id,f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:\n –§–ò–û: {user_states[message.chat.id]['name']}\n –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_states[message.chat.id]['phone']}',reply_markup=markup)
    else:
        # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        bot.register_next_step_handler(message, get_phone)


@bot.message_handler(commands=['edit_all'])
@bot.message_handler(func=lambda message: message.text.lower() == '–≤—Å–µ')
def name_from_all(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏: –§–∞–º–∏–ª–∏—è, –ò–º—è, –û—Ç—á–µ—Å—Ç–≤–æ", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, get_name_from_all)
def get_name_from_all(message):
    # full_name = message.text.strip()
    user_states[message.chat.id]['name'] = message.text.strip()
    if re.match(r'^[–ê-–Ø–Å–∞-—è—ë]+\s+[–ê-–Ø–Å–∞-—è—ë]+\s+[–ê-–Ø–Å–∞-—è—ë]+$', user_states[message.chat.id]['name']):
        # config.name = full_name
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä")
        bot.register_next_step_handler(message, get_all)
    else:
        # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –§–ò–û
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        bot.register_next_step_handler(message, get_name_from_all)
def get_all(message):
    # phone_number = message.text.strip()
    user_states[message.chat.id]['phone'] = message.text.strip()
    if re.match(r'^79\d{9}$', user_states[message.chat.id]['phone']):
        # config.phone = phone_number
        editUser.update_user_all(user_states[message.chat.id]['phone'], user_states[message.chat.id]['name'], message.from_user.id)
        markup = types.InlineKeyboardMarkup()
        bottom1 = types.InlineKeyboardButton('–í–µ—Ä–Ω–æ', callback_data='true_enter')
        bottom2 = types.InlineKeyboardButton('–ù–µ–≤–µ—Ä–Ω–æ', callback_data='edit_data')
        markup.row(bottom1, bottom2)
        bot.send_message(message.chat.id,f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:\n –§–ò–û: {user_states[message.chat.id]['name']}\n –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_states[message.chat.id]['phone']}',reply_markup=markup)
    else:
        # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        bot.register_next_step_handler(message, get_all)




@bot.message_handler(content_types = ['photo', 'video', 'audio', 'sticker', 'emoji'])
def noneContent(message):
    bot.reply_to(message, f'–ò–∑–≤–∏–Ω–∏—Ç–µ, {message.from_user.first_name}, —è –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è((')


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    if callback.data == 'status':
        bot.send_message(callback.message.chat.id,'–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –í–∞—Å –Ω–∞ –º–æ–µ–≥–æ –∫–æ–ª–ª–µ–≥—É, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –æ–¥–∏–Ω –∫–ª–∏–∫, –¥–∞–ª–µ–µ –≤–≤–µ–¥–∏—Ç–µ <b>/add (–Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞)</b>, –∞ –∑–∞—Ç–µ–º <b>/tracks</b>. –¢–∞–∫–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ (–¥–∞–ª–µ–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —Å—Ä–æ–∫–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏)\n\n' + "–°—Å—ã–ª–∫–∞ -> https://t.me/RLabbot",parse_mode='html')
       # bot.delete_message(callback.message.chat.id, callback.message.message_id)
    elif callback.data == 'order':
        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ó–∞–∫–∞–∑")
        markup1.add(item1)
        bot.send_message(callback.message.chat.id, "–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/order</b> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ó–∞–∫–∞–∑</b>" , parse_mode='html', reply_markup=markup1)
    elif callback.data == 'true_enter':
        if (not user_states[callback.message.chat.id]['user_data']):
            conn = sqlite3.connect('shop.sql')
            cur = conn.cursor()
            cur.execute(f"INSERT INTO users(name, tgId, phone) VALUES ('{user_states[callback.message.chat.id]['name']}', '{user_states[callback.message.chat.id]['tgId']}', '{user_states[callback.message.chat.id]['phone']}')")
            conn.commit()
            cur.close()
            conn.close()

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        bottom1 = types.KeyboardButton("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
        bottom2 = types.KeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º")
        markup.row(bottom1, bottom2)

        bot.send_message(callback.message.chat.id, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã)")
        bot.send_message(callback.message.chat.id, "–ù—É–∂–Ω–∞ –ª–∏ –≤–∞–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ –ø–æ–≤–æ–¥—É –∑–∞–∫–∞–∑–∞?\n\n"
                                                   "–í—ã–±–µ—Ä–∏—Ç–µ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b>, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞\n"
                                                   "–í—ã–±–µ—Ä–∏—Ç–µ <b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º</b>, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞", parse_mode='html', reply_markup=markup)
        #bot.delete_message(callback.message.chat.id,callback.message.message_id)
    elif callback.data == 'false_enter':
        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ó–∞–∫–∞–∑")
        markup1.add(item1)
        bot.send_message(callback.message.chat.id, "–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–º–∞–Ω–¥—É <b>/order</b> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ó–∞–∫–∞–∑</b>", parse_mode='html', reply_markup=markup1)
    elif callback.data == 'edit_data':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        bottom1 = types.KeyboardButton("–§–ò–û")
        bottom2 = types.KeyboardButton("–ù–æ–º–µ—Ä")
        bottom3 = types.KeyboardButton("–í—Å–µ")
        markup.row(bottom1, bottom2)
        markup.add(bottom3)
        bot.send_message(callback.message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–µ–Ω—è–ª–∏—Å—åüôÉ', reply_markup=markup)

    bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text = 'Continue....', reply_markup=None)






@bot.message_handler()
def info(message):
    if (message.text.lower() == '–ø—Ä–∏–≤–µ—Ç'):
        bot.send_message(message.chat.id, "üòï")
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n "
                                          "–Ø - <b>—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–µ —Ç–∫–∞–Ω–µ–π</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑.".format(message.from_user, bot.get_me()),
                         parse_mode='html')
    elif (message.text.lower() == 'id'):
        bot.reply_to(message, f'ID: {message.from_user.id}')
    elif (message.text.lower() == 'test'):
        conn = sqlite3.connect('shop.sql')
        cur = conn.cursor()
        cur.execute('SELECT * FROM users')
        products = cur.fetchall()
        info = ''
        for elm in products:
            info += f'name: {elm[1]}, phone: {elm[3]}, id: {elm[2]}'
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–µ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        bot.send_message(message.chat.id, info)
        cur.close()
        conn.close()
    else:
        bot.reply_to(message, f'–ò–∑–≤–∏–Ω–∏—Ç–µ, {message.from_user.first_name}, —è –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è((')



bot.polling(none_stop = True)